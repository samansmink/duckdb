name: Python
on:
  workflow_call:
    inputs:
      override_git_describe:
        type: string
      git_ref:
        type: string
      skip_tests:
        type: string
  workflow_dispatch:
    inputs:
      override_git_describe:
        type: string
      git_ref:
        type: string
      skip_tests:
        type: string
  repository_dispatch:
  push:
    branches:
      - '**'
      - '!main'
      - '!feature'
    paths-ignore:
      - '**.md'
      - 'examples/**'
      - 'test/**'
      - 'tools/**'
      - '!tools/pythonpkg/**'
      - '.github/patches/duckdb-wasm/**'
      - '.github/workflows/**'
      - '!.github/workflows/Python.yml'

  pull_request:
    types: [opened, reopened, ready_for_review]
    paths-ignore:
      - '**.md'
      - 'examples/**'
      - 'test/**'
      - 'tools/**'
      - '!tools/pythonpkg/**'
      - '.github/patches/duckdb-wasm/**'
      - '.github/workflows/**'
      - '!.github/workflows/Python.yml'


concurrency:
  group: python-${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/main' || github.sha }}-${{ inputs.override_git_describe }}
  cancel-in-progress: true

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  OVERRIDE_GIT_DESCRIBE: ${{ inputs.override_git_describe }}
  CIBW_TEST_SKIP: ${{ inputs.skip_tests == 'true' && '*-*' || '' }}

jobs:
   manylinux-extensions-x64:
    name: Linux Extensions (linux_amd64_gcc4)
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux2014_x86_64
#    needs: linux-python3-9
    env:
      GEN: ninja
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ inputs.git_ref }}

    - uses: ./.github/actions/manylinux_2014_setup
      with:
        aws-cli: 1
        ninja-build: 1
        ccache: 1
        nodejs: 1
        ssh: 1
        python_alias: 1
        openssl: 1

    - name: Setup Rust for manylinux (dtolnay/rust-toolchain doesn't work due to curl being old here)
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y 
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Configure OpenSSL for Rust
      run: |
        echo "OPENSSL_ROOT_DIR=`pwd`/build/release/vcpkg_installed/x64-linux" >> $GITHUB_ENV
        echo "OPENSSL_DIR=`pwd`/build/release/vcpkg_installed/x64-linux" >> $GITHUB_ENV
        echo "OPENSSL_INCLUDE_DIR=`pwd`/build/release/vcpkg_installed/x64-linux/include" >> $GITHUB_ENV
        echo "OPENSSL_USE_STATIC_LIBS=true" >> $GITHUB_ENV

    - uses: ./.github/actions/build_extensions
      with:
        vcpkg_target_triplet: x64-linux
        post_install: rm build/release/src/libduckdb*
        deploy_as: linux_amd64_gcc4
        s3_id: ${{ secrets.S3_ID }}
        s3_key: ${{ secrets.S3_KEY }}
        signing_pk: ${{ secrets.DUCKDB_EXTENSION_SIGNING_PK }}
        run_tests: ${{ inputs.skip_tests != 'true' && 1 || 0 }}
        run_autoload_tests: ${{ inputs.skip_tests != 'true' && 1 || 0 }}
        treat_warn_as_error: 0
        ninja: 1

    - name: Delta rust build error log
      if: always()
      run: |
        cat build/release/rust/src/delta_kernel-stamp/delta_kernel-build-*.log

    - uses: actions/upload-artifact@v3
      with:
        name: manylinux-extensions-x64
        path: |
          build/release/extension/*/*.duckdb_extension