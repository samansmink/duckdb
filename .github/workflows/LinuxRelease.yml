name: LinuxRelease
on:
  workflow_call:
    inputs:
      override_git_describe:
        type: string
      git_ref:
        type: string
      skip_tests:
        type: string
  workflow_dispatch:
    inputs:
      override_git_describe:
        type: string
      git_ref:
        type: string
      skip_tests:
        type: string
  repository_dispatch:
  push:
    branches:
      - '**'
      - '!main'
      - '!feature'
    paths-ignore:
      - '**.md'
      - 'tools/**'
      - '!tools/shell/**'
      - '.github/patches/duckdb-wasm/**'
      - '.github/workflows/**'
      - '!.github/workflows/LinuxRelease.yml'

  pull_request:
    types: [opened, reopened, ready_for_review]
    paths-ignore:
      - '**.md'
      - 'tools/**'
      - '!tools/shell/**'
      - '.github/patches/duckdb-wasm/**'
      - '.github/workflows/**'
      - '!.github/workflows/LinuxRelease.yml'


concurrency:
  group: linuxrelease-${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/main' || github.sha }}-${{ inputs.override_git_describe }}
  cancel-in-progress: true

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  OVERRIDE_GIT_DESCRIBE: ${{ inputs.override_git_describe }}

jobs:
 # Linux extensions for builds that use C++11 ABI, currently these are all linux builds based on ubuntu >= 18 (e.g. NodeJS)
 # note that the linux-release-64 is based on the manylinux-based extensions, which are built in .github/workflows/Python.yml
 linux-extensions-64:
    # Builds extensions for linux_amd64
    name: Linux Extensions (x64)
    runs-on: ubuntu-latest
    container: ubuntu:18.04
    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ inputs.git_ref }}

    - uses: ./.github/actions/ubuntu_18_setup
      with:
        vcpkg: 1
        openssl: 1
        ccache: 1
        git_ref: ${{ inputs.git_ref }}

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Configure OpenSSL for Rust
      run: |
        echo "OPENSSL_ROOT_DIR=`pwd`/build/release/vcpkg_installed/${{ matrix.vcpkg_triplet }}" >> $GITHUB_ENV
        echo "OPENSSL_DIR=`pwd`/build/release/vcpkg_installed/${{ matrix.vcpkg_triplet }}" >> $GITHUB_ENV
        echo "OPENSSL_USE_STATIC_LIBS=true" >> $GITHUB_ENV

    - uses: ./.github/actions/build_extensions
      with:
        vcpkg_target_triplet: x64-linux
        post_install: rm build/release/src/libduckdb*
        deploy_as: linux_amd64
        treat_warn_as_error: 0
        run_tests: ${{ inputs.skip_tests != 'true' && 1 || 0 }}
        run_autoload_tests: ${{ inputs.skip_tests != 'true' && 1 || 0 }}
        s3_id: ${{ secrets.S3_ID }}
        s3_key: ${{ secrets.S3_KEY }}
        signing_pk: ${{ secrets.DUCKDB_EXTENSION_SIGNING_PK }}
        ninja: 1

    - name: Delta rust build error log
      if: always()
      run: |
        cat build/release/rust/src/delta_kernel-stamp/delta_kernel-build-*.log

    - uses: actions/upload-artifact@v3
      with:
        name: linux-extensions-64
        path: |
          build/release/extension/*/*.duckdb_extension

 linux-extensions-64-aarch64:
    # Builds extensions for linux_arm64
    name: Linux Extensions (aarch64)
    runs-on: ubuntu-latest
    container: ubuntu:18.04
    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ inputs.git_ref }}

      - uses: ./.github/actions/ubuntu_18_setup
        with:
          vcpkg: 1
          openssl: 1
          aarch64_cross_compile: 1
          ccache: 1
          git_ref: ${{ inputs.git_ref }}

      - name: Setup Rust for cross compilation
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-unknown-linux-gnu

      - name: Configure OpenSSL for Rust
        run: |
          echo "OPENSSL_ROOT_DIR=`pwd`/build/release/vcpkg_installed/${{ matrix.vcpkg_triplet }}" >> $GITHUB_ENV
          echo "OPENSSL_DIR=`pwd`/build/release/vcpkg_installed/${{ matrix.vcpkg_triplet }}" >> $GITHUB_ENV
          echo "OPENSSL_USE_STATIC_LIBS=true" >> $GITHUB_ENV

      - uses: ./.github/actions/build_extensions
        with:
          vcpkg_target_triplet: arm64-linux
          deploy_as: linux_arm64
          duckdb_arch: linux_arm64
          treat_warn_as_error: 0
          s3_id: ${{ secrets.S3_ID }}
          s3_key: ${{ secrets.S3_KEY }}
          signing_pk: ${{ secrets.DUCKDB_EXTENSION_SIGNING_PK }}
          aarch64_cross_compile: 1
          run_tests: 0 # Cannot run tests here due to cross-compiling
          run_autoload_tests: 0
          ninja: 1

      - name: Delta rust build error log
        if: always()
        run: |
          cat build/release/rust/src/delta_kernel-stamp/delta_kernel-build-*.log

      - uses: actions/upload-artifact@v3
        with:
          name: linux-extensions-64-aarch64
          path: |
            build/release/extension/*/*.duckdb_extension